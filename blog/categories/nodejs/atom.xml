<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: NodeJS | Danial Khosravi's Blog]]></title>
  <link href="http://DanialK.github.com/blog/categories/nodejs/atom.xml" rel="self"/>
  <link href="http://DanialK.github.com/"/>
  <updated>2016-12-29T11:43:33+11:00</updated>
  <id>http://DanialK.github.com/</id>
  <author>
    <name><![CDATA[Danial Khosravi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Talk Slides: Isomorphic JavaScript What? Why? How?]]></title>
    <link href="http://DanialK.github.com/blog/2015/12/17/talk-slides-isomorphic-javascript/"/>
    <updated>2015-12-17T15:09:00+11:00</updated>
    <id>http://DanialK.github.com/blog/2015/12/17/talk-slides-isomorphic-javascript</id>
    <content type="html"><![CDATA[<script async class="speakerdeck-embed" data-id="9b21278e27b745d5a01c57c7372ff215" data-ratio="1.33333333333333" src="http://DanialK.github.com//speakerdeck.com/assets/embed.js"></script>




<!-- more -->


<p>Slides of the talk about Isomorphic JavaScript and React I gave a while ago in July.</p>

<p><img src="/images/isoninja_talk_1.jpg">
<img src="/images/isoninja_talk_2.jpg">
<img src="/images/isoninja_talk_3.jpg"></p>

<p><a href="https://www.evernote.com/shard/s243/sh/08e0c2d5-5beb-4858-af82-917991bff3ea/b185c6c291ee6273">Photos</a></p>

<p><a href="" title="https://github.com/DanialK/nodejs-ninjas-isomorphic-talk-codes">Source Code</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Express 4 Tutorial - Simple Server]]></title>
    <link href="http://DanialK.github.com/blog/2014/12/05/express-4-tutorial-simple-server/"/>
    <updated>2014-12-05T14:03:00+11:00</updated>
    <id>http://DanialK.github.com/blog/2014/12/05/express-4-tutorial-simple-server</id>
    <content type="html"><![CDATA[<p><a href="http://expressjs.com/">Express 4</a> was released a while ago and although the API is pretty much the same as version 3, there are some breaking changes which I recommend you to take a look at this <a href="http://expressjs.com/guide/migrating-4.html">page</a> in case you want to move your express 3 application to express 4.</p>

<p>Version 4 changed to Express core and middleware system. Which means the dependency on Connect framework which was built-in Express is removed and you must separately download and add the middleware you want to your application. Also the routing system has changed and the new router has much more flexibility.</p>

<p>I'm planing to write a tutorial series on Express 4. In this tutorial we're writing a very basic Express 4 app and connect it to a (dummy)Database and authenticate users.</p>

<h3><a href="https://github.com/DanialK/express4-tutorial-simple-server">Source Code</a></h3>

<!-- more -->


<h3>Applicaiton Structure</h3>

<pre><code>App

- public -&gt; We put static files here

- views -&gt; Our Jade template views are here

- routes -&gt; Different routers of the application stay here
</code></pre>

<h3>App.js</h3>

<p>If you are familiar with Express 3, this is code also looks familiar to you. The difference is that now we have to load <code>cookie-parser</code>, <code>body-parser</code> and <code>express-session</code> and load them into our applicaiton as a middleware by <code>app.use()</code>.</p>

<p>``` js App.js https://github.com/DanialK/express4-tutorial-simple-server/blob/
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var session = require('express-session')</p>

<p>// loading routes
var index = require('./routes/index');
var login = require('./routes/login');
var signup = require('./routes/signup');
var user = require('./routes/user');</p>

<p>var app = express();</p>

<p>// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');</p>

<p>app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));
app.use(session({</p>

<pre><code>secret : "SHUUUUSH",
saveUninitialized: true,
resave : false 
</code></pre>

<p>}))</p>

<p>// attaching routes to the application
app.use(index);
app.use(login);
app.use(signup);
app.use(user);</p>

<p>// catch 404 and forward to error handler
app.use(function(req, res, next) {</p>

<pre><code>var err = new Error('Not Found');
err.status = 404;
next(err);
</code></pre>

<p>});</p>

<p>// error handlers</p>

<p>// development error handler
// will print stacktrace
if (app.get('env') === 'development') {</p>

<pre><code>app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
        message: err.message,
        error: err
    });
});
</code></pre>

<p>}</p>

<p>// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {</p>

<pre><code>res.status(err.status || 500);
res.render('error', {
    message: err.message,
    error: {}
});
</code></pre>

<p>});</p>

<p>module.exports = app;</p>

<p>```</p>

<h2>Routers</h2>

<p>Each route file in routes folder exports a router which takes routes for a specific part of the application and like middlewares we load them into the applicaiton by <code>app.use()</code></p>

<p>``` js index.js https://github.com/DanialK/express4-tutorial-simple-server/blob/master/routes/index.js</p>

<p>var express = require('express');
var router = express.Router();</p>

<p>router.get('/', function(req, res) {</p>

<pre><code>var user = req.session.user; 
res.render('index', { title: 'Express 4 Tutorial', user : user? user: null });
</code></pre>

<p>});</p>

<p>module.exports = router;</p>

<p>```</p>

<h2>Source code</h2>

<p>This simple app, sign you up as a user and saves in session. You can access your profile and other users profile by going to <code>localhost:3000/user/:id</code> which you have to put a valid user id, otherwise you receive 404. This simple app also restricts you to access users' profile if you're not logged in and restricts your access to pages such as login and sign up after you are signed in.</p>

<p>You can find the code <a href="https://github.com/DanialK/express4-tutorial-simple-server">HERE</a></p>

<p>To run the application install the dependencies <code>npm install</code> and then <code>npm start</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arduino, ProcessingJS and SocketIO In Action]]></title>
    <link href="http://DanialK.github.com/blog/2014/04/26/arduino-and-processingjs-and-socketio-in-action/"/>
    <updated>2014-04-26T21:06:00+10:00</updated>
    <id>http://DanialK.github.com/blog/2014/04/26/arduino-and-processingjs-and-socketio-in-action</id>
    <content type="html"><![CDATA[<p>So today I wanted to do something relatively cool(!!) with things that I had around me. There are a lot of examples out there that sends input values from Arduino to Processing and then draw something cool. I wanted to do something a bit cooler and as always I wanted to bring Javascript into the action.
In this tutorial i'm showing you how I connected my Arduino to a local NodeJS server and with the use of SocketIO send the value of potentiometer to client side and draw a cool graph with ProcessingJS !!!</p>

<!-- more -->


<h3>Arduino</h3>

<p>We begin with setting up the Arduino board and program it to write the value of potentiometer into serial port.</p>

<p>I used following schematic to set wire up my board to potentiometer:</p>

<p><img src="/images/arduino-processingjs-socketio.png"></p>

<p>Now using the following code, we read the value of potentiometer
``` js
void setup() {
  // initialize serial communication at 9600 bits per second:
  Serial.begin(9600);
}</p>

<p>void loop() {
  // read the input on analog pin 0:
  int sensorValue = analogRead(A0);
  // map the value between 0 to 90 :
  float val = map(sensorValue,0,1023,0,90);
  // print out the value :
  Serial.println(val);
}
```</p>

<p>Note that I mapped our analog value of potentiometer, which is between 0 to 1023, to a number between 0 to 90. It's because we need our value to be in that range so our processing example would draw correctly.</p>

<h3>Server</h3>

<p>Our server needs to have access to the same serial port that the Arduino is connected to read the value and send it to the client using SocketIO.
This node server also uses ExpressJS to serve the static files.
My Arduino is connected to <code>/dev/tty.usbmodem1421</code> . In Arduino app if you go to tools/serial port the one that has check next to it is the port that your Arduino board is connected. Windows users your port would start with <code>COM</code>.</p>

<p>``` js
var http = require('http');
var express = require('express');
var app = express();
var SerialPort = require("serialport").SerialPort;
var server = http.createServer(app).listen(3000);
var io = require('socket.io').listen(server);</p>

<p>app.use(express.static(__dirname + '/public'));</p>

<p>var serialport = new SerialPort("/dev/tty.usbmodem1421"); // replace this address with your port address
serialport.on('open', function(){</p>

<pre><code>// Now server is connected to Arduino
console.log('Serial Port Opend');

var lastValue;
io.sockets.on('connection', function (socket) {
    //Connecting to client 
    console.log('Socket connected');
    socket.emit('connected');
    var lastValue;

    serialport.on('data', function(data){
        var angle = data[0];
        if(lastValue !== angle){
            socket.emit('data', angle);
        }
        lastValue = angle;
    });
});
</code></pre>

<p>});</p>

<p>```
Keep that in mind that Arduino constantly reads the value of potentiometer and writes it into the serial. If we emit every single value that comes into the serial port app would be slow. That's why we keep the value from serial port in lastValue and check it each time and if it changed we're going to emit the value to the client.</p>

<h3>Client Side</h3>

<p>In our browser <code>script.js</code>, we're listening for data event on socket and we're going to show the value on the screen as well as assigning it to our angle variable.</p>

<p>``` js</p>

<p>var dialogue = document.getElementById('dialogue');
var box = document.getElementById('angle');
socket.on('connected', function(){</p>

<pre><code>dialogue.innerHTML = "Socket Connected";
</code></pre>

<p>});
socket.on('disconnect', function(){</p>

<pre><code>dialogue.innerHTML = "Socket Disconnected";
</code></pre>

<p>});
socket.on('data', function (data) {</p>

<pre><code>box.innerHTML = data;
angle = data;
</code></pre>

<p>});</p>

<p>```</p>

<p>pretty easy right?</p>

<h3>ProcessingJS</h3>

<p>I'm not an expert in Processing but good news is i've started learning more about Processing language and trying to make some cool stuff with it. So I found this example in ProcessingJS website which I thinks it's perfect for this little project(it exactly gives you that feeling that something is changing as you play with the potentiometer).</p>

<p><a href="http://processingjs.org/learning/topic/tree/">Link to the example on ProcessingJS website</a></p>

<p>After including the ProcessingJS to our HTML page, like below we load our tree.pde, which is a processing file into our app and ProcessingJS will compile and draw it for us into our canvas. You just have to give the path of the file in your filesystem relative to the index.html file.
<code>js
&lt;canvas id="tree" data-processing-sources="tree.pde"&gt;&lt;/canvas&gt;
</code></p>

<p>The only difference of this tree.pde and actual code on the ProcessingJS website is that in the actual code, they generate the angle from position of you mouse on the canvas. However in our example we get the angle from our Arduino. The cool thing about ProcessingJS is that because it compiles processing code into Javascript, then you are allowed to write Javascript inside your processing code and you have access to all the Javascript functions and variables. That's why we can directly replace the <code>float a = (mouseX / (float) width) * 90f;</code> in the actual code with <code>float a = angle;</code> which angle is a global variable and it's value changes everytime our client code receives new value form server.</p>

<h3>Result</h3>

<p>Here is a gif of the result. As you can see I have tree windows open and they are all sync together because of the realtime communication of client and server using SocketIO.</p>

<p><img class="thumb" src="/images/arduino-processingjs-socketio-gif-thumb.png"></p>

<h4>The source code of this project is available <a href="https://github.com/DanialK/arduino-processingjs-socketio">HERE</a> on github.</h4>

<p>Make sure to run <code>npm install &amp;&amp; bower install</code> to install all the dependencies.
Connect your Arduino board to the same port that you set in your app.js and then run <code>npm start</code> and head over to <code>localhost:3000</code> to see the magic !!!</p>

<p>Hope you guys enjoyed it !!
If you had any question use comments below or send me your questions at dani_khosravi@yahoo.com. Also follow me on <a href="https://twitter.com/DaniaL_KH">twitter</a> if your interested in Arduino, Javascript and these sort of goodies :D</p>

<p><script type="text/javascript">
	$(document).ready(function(){
		var thumb = $('.thumb');
		var thumbSrc = thumb.attr('src');
		var gifSrc = thumbSrc.slice(0, thumbSrc.indexOf('-gif-thumb')) + '.gif';
		thumb.one('click', function() {
			$(this).attr('src', gifSrc);
		});
	});
</script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arduino and NodeJS Communication With Serial Ports]]></title>
    <link href="http://DanialK.github.com/blog/2014/04/12/arduino-and-nodejs-communication-with-serial-ports/"/>
    <updated>2014-04-12T17:19:00+10:00</updated>
    <id>http://DanialK.github.com/blog/2014/04/12/arduino-and-nodejs-communication-with-serial-ports</id>
    <content type="html"><![CDATA[<p>Hello everyone,
2 days ago I recieved my arduino kit that I had ordered and i'm really excited to tell you that I'll be posting more arduino tutorials from now on.</p>

<p>One of the cool things that i discoved that i'm sharing with you here, is communication of Arduino and NodeJS using serial ports.
Basically what we're doing is sending some data(zeros and ones) from the arduino to the land of Javascript and NodeJS.</p>

<!-- more -->


<h3>Circuit</h3>

<p>This is the schematic of our cicuit, pretty simple. When you wire up things this way, by pressing the button we're able to digitally read the value of pin 2, which if the button is pressed it's 1 and if it isn't, the value is 0.</p>

<p><img src="/images/serialport_curcuit.png"></p>

<h3>Arduino</h3>

<p>The Arduino code is pretty straightforward and commented. Basically we say, pin number 2 is an input, then in our loop function we digitally read it's value every 100ms. If the value is HIGH(1) in our using Serial.write we write 1 into the serialport and if it's LOW(0) we write 0.</p>

<p>``` cpp
/*
  Writing to Serial Port
  Writes a digital input on pin 2 into the serial</p>

<p>  This example code is in the public domain.
 */</p>

<p>// digital pin 2 has a pushbutton attached to it.
int pushButton = 2;</p>

<p>// the setup routine runs once when you press reset:
void setup() {
  // initialize serial communication at 9600 bits per second:
  Serial.begin(9600);
  // make the pushbutton's pin an input:
  pinMode(pushButton, INPUT);
}</p>

<p>// the loop routine runs over and over again forever:
void loop() {
  // read the input pin:
  int buttonState = digitalRead(pushButton);
  // print out the state of the button into the serial port:
  if(buttonState == HIGH){</p>

<pre><code>Serial.write(1);
</code></pre>

<p>  }else{</p>

<pre><code>Serial.write(0);
</code></pre>

<p>  }</p>

<p>  // delay in between reads for stability
  delay(100);      <br/>
}</p>

<p>```</p>

<h3>NodeJS</h3>

<p>With the help of <code>serialport</code> library we can easily get connected to the port that Arduino Board is connected and start our reading. From <code>Tools/Serial Port</code> in Arduino IDE, get the port that the board is connected. Mine is <code>/dev/tty.usbmodem1421</code> and yours might be different. On windows computers the port should start with <code>COM</code>. When you had you port address, replace it mine.</p>

<p>In our js code, we load the libary and make a instance of it by passing our port address. Then after the port got oponed, we start listening for the data, and log it. By the way the data is a buffer so it's your choice how you're going to parse and use it. But here, just to show that these two worlds are communicating, the first index of data is 0 whenever we write 0, and 1 whenever we write 1 into the Serial in arduino(Which means anytime we press the button).</p>

<p>``` js</p>

<p>var SerialPort = require("serialport").SerialPort;
var serialport = new SerialPort("/dev/tty.usbmodem1421");
serialport.on('open', function(){</p>

<pre><code>console.log('Serial Port Opend');
serialport.on('data', function(data){
    console.log(data[0]);
});
</code></pre>

<p>});</p>

<p>```</p>

<p>After you uploaded the app to Arduino and it was running, in your teminal run <code>node app.js</code> and press the button and enjoy getting zeros and ones !!!!</p>

<hr />

<h4>Last but not least</h4>

<p>There is an awesome javascript framework for Arduino called <a href="https://github.com/rwaldron/johnny-five">Johnny-Five</a> which has really nie API and there a lot of cool projects and examples on their page which I highly recommend to check it out.</p>

<p>The source code of this tutorial is <a href="https://github.com/DanialK/Arduino-NodeJs-Serialport">here</a> on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authentication Using PassportJS]]></title>
    <link href="http://DanialK.github.com/blog/2013/02/23/authentication-using-passportjs/"/>
    <updated>2013-02-23T01:35:00+11:00</updated>
    <id>http://DanialK.github.com/blog/2013/02/23/authentication-using-passportjs</id>
    <content type="html"><![CDATA[<p>As I promised before, today i'm going to talk about authentication with <a href="http://passportjs.org/">PassportJS</a>.
Passport is one of the capable node modules which can be used for local authentication or even using it for integrating with Facebook or Twitter and …</p>

<p>Basically in passport we set up some strategies and then pass the passport middleware into our application and then passport will take care of most of the things.</p>

<p>Strategies can be local for your local authentication , or Facebook for authentication with Facebook .</p>

<p>I'm going talk about Passport API a little bit and building a sample app which have local, Facebook and Twitter authentication. And also i'm going to use MongoDB as database of this application.</p>

<h1>Application Overview :</h1>

<ol>
<li>Installing Passport and adding to app</li>
<li>Adding passport middlewares</li>
<li>Database and Models</li>
<li>Setting the strategies</li>
<li>Function Handlers</li>
<li>Routes</li>
</ol>


<hr />

<!-- more -->


<h3>Firstly, what is the pass.js?</h3>

<p>As you may noticed in my source file folder i'm using a pass.js as a module in my app. I could have just save username and password of each user in my database for authentication but to make our simple app look a little bit serious I used this file which I copied form TJ examples. basically what it does is for making new user if you pass user password to it using  <code>crypto</code>, Node's built-in module, it encrypt our user's password and save it to db. And if we trying to sing in the function take the entered password and encrypt it and check it with a encrypted password which is saved in database and if they are same, it would log the user into the site.
We could have don't use it but it's not a bad idea to use it !!</p>

<hr />

<h1>Lets Get Started</h1>

<h3>Installing Passport:</h3>

<p>Firstly you should install the PassportJS using NPM and require it in to your application.</p>

<pre><code>$ npm install passport
</code></pre>

<p>Because we are going to define Facebook and Twitter strategies, lets install their plugins as well as local plugin for local authentication :</p>

<pre><code>$ npm install passport-local
$ npm install passport-facebook
</code></pre>

<p>And require them :</p>

<p>``` js
passport = require("passport");
LocalStrategy = require('passport-local').Strategy;
FacebookStrategy = require('passport-facebook').Strategy;</p>

<p>```</p>

<h3>Middlewares:</h3>

<p>Then make sure you have this middleware in use :</p>

<p>``` js</p>

<p>app.use(express.cookieParser());
app.use(express.bodyParser());
app.use(express.session({ secret: 'SECRET' }));
app.use(passport.initialize());
app.use(passport.session());</p>

<p>```</p>

<h3>Database and Models:</h3>

<p>I'm using mongoose to use my MongoDB server in application.</p>

<ol>
<li>Run mongo server by <code>mongod</code></li>
<li>Connect to server in application<code>mongoose.connect("mongodb://localhost/myapp");</code></li>
<li>Our local user schema and it's model to store information of our local users.
``` js</li>
</ol>


<p>var LocalUserSchema = new mongoose.Schema({</p>

<pre><code>username: String,
salt: String,
hash: String
</code></pre>

<p>});</p>

<p>var Users = mongoose.model('userauths', localUserSchema);</p>

<p>```
4. Our Facebook users schema and model to store information of the users that logged in with Facebook</p>

<p>``` js
var FacebookUserSchema = new mongoose.Schema({</p>

<pre><code>fbId: String,
email: { type : String , lowercase : true},
name : String
</code></pre>

<p>});
var FbUsers = mongoose.model('fbs',FacebookUserSchema);</p>

<p>```</p>

<h3>Strategies:</h3>

<p>To use passport as our middleware first we should set the strategies to be initialised using passport initialise middleware.</p>

<h4>Local Strategy</h4>

<p>``` js</p>

<p>passport.use(new LocalStrategy(function(username, password,done){</p>

<pre><code>Users.findOne({ username : username},function(err,user){
    if(err) { return done(err); }
    if(!user){
        return done(null, false, { message: 'Incorrect username.' });
    }

    hash( password, user.salt, function (err, hash) {
        if (err) { return done(err); }
        if (hash == user.hash) return done(null, user);
        done(null, false, { message: 'Incorrect password.' });
    });
});
</code></pre>

<p>}));</p>

<p>```</p>

<h4>Facebook Strategy</h4>

<p>Firstly you should go to <a href="https://developers.facebook.com/">Facebook Developer</a> and make a new application to get clientID and clientSecret. It should be noted that because we are running this app locally so set the app URL to <code>http://localhost:3000</code> . Also in callbackURL we passed the "/auth/facebook/callback" route at the end of the address because the authentication data would send to this route to be connected to Facebook and be integrated.</p>

<p>``` js
passport.use(new FacebookStrategy({</p>

<pre><code>clientID: "YOUR ID",
clientSecret: "YOUR CODE",
callbackURL: "http://localhost:3000/auth/facebook/callback"
</code></pre>

<p>  },
  function(accessToken, refreshToken, profile, done) {</p>

<pre><code>FbUsers.findOne({fbId : profile.id}, function(err, oldUser){
    if(oldUser){
        done(null,oldUser);
    }else{
        var newUser = new FbUsers({
            fbId : profile.id ,
            email : profile.emails[0].value,
            name : profile.displayName
        }).save(function(err,newUser){
            if(err) throw err;
            done(null, newUser);
        });
    }
}); 
</code></pre>

<p>  }
));</p>

<p>```</p>

<p>The other important part of configuring passport is serializeUser and deserializeUser which basically set the user to req.user and establish a session via a cookie set in the user's browser.
``` js</p>

<p>passport.serializeUser(function(user, done) {</p>

<pre><code>done(null, user.id);
</code></pre>

<p>});</p>

<p>passport.deserializeUser(function(id, done) {</p>

<pre><code>FbUsers.findById(id,function(err,user){
    if(err) done(err);
    if(user){
        done(null,user);
    }else{
        Users.findById(id, function(err,user){
            if(err) done(err);
            done(null,user);
        });
    }
});
</code></pre>

<p>});</p>

<p>```
In deserializeUser we typically find a user in database based on the given id and pass the result to done(). As you may noticed for some reason I separate the local users and Facebook users in different documents(collections) that's why I did so in deserializeUser but I believe there should be a better practice for searching a data in tow different collection that what i've done but I couldn't find such a query in mongoose api !</p>

<h3>Function Handlers</h3>

<p>Like my previous example on authentication ( the simple one) here we have 2 helper function.One for check if user logged in and can access to all the parts of the site and we can use it as a middleware of the routes that need authentication,and the other one which we just use it as a middleware of post request on "/signup" route to make sure the username had not already taken .</p>

<p>The main different of this authenticatedOrNot function with the one in previous tutorial is that passport provide a isAuthenticated() method which we can use it intend if req.session.user which we used in previous tutorial.</p>

<p>``` js</p>

<p>function authenticatedOrNot(req, res, next){</p>

<pre><code>if(req.isAuthenticated()){
    next();
}else{
    res.redirect("/login");
}
</code></pre>

<p>}</p>

<p>function userExist(req, res, next) {</p>

<pre><code>Users.count({
    username: req.body.username
}, function (err, count) {
    if (count === 0) {
        next();
    } else {
        // req.session.error = "User Exist"
        res.redirect("/singup");
    }
});
</code></pre>

<p>}</p>

<p>```</p>

<h3>Routes:</h3>

<p>The routes are quit easy to understand if you check at the source code, but there is some passport methods that i'm going to explain</p>

<p>First, in our post request to "/signup" request after saving a new user to database, I used passport built in login method which automatically log the new user in after signing up and redirect him/her to "/".</p>

<p>Second, every time you use Facebook strategy you should prepare two routes for the authentication with Facebook (or even twitter and …).</p>

<p>``` js</p>

<p>app.get("/auth/facebook", passport.authenticate("facebook",{ scope : "email"}));</p>

<p>app.get("/auth/facebook/callback",</p>

<pre><code>passport.authenticate("facebook",{ failureRedirect: '/login'}),
function(req,res){
    res.render("loggedin", {user : req.user});
}
</code></pre>

<p>);</p>

<p>```</p>

<p>It use <code>passport.authenticate()</code> method and by passing "facebook" it knows that it should use Facebook strategy</p>

<p>Third, if you don't use Facebook or etc for singing in the site and you fill the login form in "/login" route and submit it, it would send a post request to "/login" which is going to be checked and authenticated by passing "local" as a first argument of <code>passport.authenticate()</code> method. Also there is some options like <code>successRedirect</code> ,<code>failureRedirect</code>, or even <code>successFlash</code> and <code>failureFlash</code> if you use <a href="https://github.com/jaredhanson/connect-flash">connect-flash</a> .</p>

<p>And lastly, passport have a built in logout() method that instead of destroying session like what we did before, we can use <code>req.logout()</code> on our "/logout" route.</p>

<hr />

<h1>Also,</h1>

<p>Check out the jade files and routes to see how we welcome authenticated user's and also the can access to "/profile" route.</p>

<p>If you have any question or even any hint to improve my knowledge I appreciate to hear from you <strong>@DaniaL_KH</strong> or <strong>dani_khosravi@yahoo.com</strong> .</p>

<p>Hope you enjoy this simple tutorial.</p>

<h2><a href="https://github.com/DanialK/PassportJS-Authentication">Source Code on Github</a></h2>
]]></content>
  </entry>
  
</feed>
