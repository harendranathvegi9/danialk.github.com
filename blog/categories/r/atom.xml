<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: R | Danial Khosravi's Blog]]></title>
  <link href="http://DanialK.github.com/blog/categories/r/atom.xml" rel="self"/>
  <link href="http://DanialK.github.com/"/>
  <updated>2016-11-29T00:31:55+11:00</updated>
  <id>http://DanialK.github.com/</id>
  <author>
    <name><![CDATA[Danial Khosravi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Estimating Pi Using Monte Carlo Simulations]]></title>
    <link href="http://DanialK.github.com/blog/2016/11/28/estimating-pi-using-monte-carlo-simulations/"/>
    <updated>2016-11-28T23:32:00+11:00</updated>
    <id>http://DanialK.github.com/blog/2016/11/28/estimating-pi-using-monte-carlo-simulations</id>
    <content type="html"><![CDATA[<p>Pi (3.141593) is one of the few magical numbers in Mathematics that we often trust, accept and use in our calculations. However, you might be curious to know where it comes from. Pi can be obtained analytically which gives us a value equal to 3.141593 but here we're going to find the value of pi numerically by running <a href="https://en.wikipedia.org/wiki/Monte_Carlo_method">Monte Carlo simulations</a>.</p>

<!-- more -->


<p>As you might remember from primary or elementary school, the formula to obtain the area of a circle is:</p>

<p>$$
A = \pi \times r^2
$$<p>


where $r$ is the radius of the circle. So if we have a circle with $r=1$, then its area is just $\pi$ !

Now imagine we have a circle inside a square with sides equal to 2 and if we look at a corner of it, we see that $\frac{1}{4}$ of the area of the circle is inside a square with sides equal to 1. So we know the area of that slice of circle is $\frac{\pi}{4}$.


So if we denote the area of the quarter of the circle as $Q$ and we know:
<p>$$
\pi = 4 \times \frac{Q}{r^2}
$$</p>

Now, using Monte Carlo simulations, we generate a large number, lets say a million, $x$ and $y$ coordinates that are uniformly distributed $Unif(0, 1)$ and using the pythagorus formula we find their distances from the centre of the circle 

<p>$$
r' = \sqrt{x^2 + y^2}
$$</p>

If our ${r'}$ is smaller than the radius of the circle, $r=1$, then it's inside the circle and vice versa. If we run enough simulations, then the proportion of points that are inside the circle to the total number of trials would essentially give us the area of that slice of the circle, $Q$.

For a circle with $r=1$, if we multiply that area by 4, using the $\pi$ formula above, we get our estimate for $\pi$.


<br/>
<br/>

<h3> Plot of 500,000 simulations </h3>
<img src="/images/pi_estimate_1.png">

<br/>

<h3> Plot of 1,000,000 simulations </h3>
<img src="/images/pi_estimate_2.png">
<br/>

<h3> Code </h3>

``` r pi_estimate.R https://github.com/DanialK/pi_estimation

library(ggplot2)
trials <- 1000000

r <- 1
x <- runif(trials, 0, r)
y <- runif(trials, 0, r)

distance_from_center <- sqrt(x^2 + y^2)
inbounds <- distance_from_center < r


ggplot(data.frame(x, y, inbounds), aes(x, y, color=inbounds)) +
  theme_bw() +
  ggtitle(paste(round(trials), 'Trials')) +
  guides(color=FALSE) +
  geom_point(size=0.002) +
  ggtitle(paste(trials, 'Trials'))

pi_estimate <- 4 * sum(inbounds)/trials
pi_estimate

error = 1 - pi_estimate/pi
error

```






<script type="text/javascript">
window.MathJax = {
    extensions: ["tex2jax.js"],
    jax: ["input/TeX", "output/HTML-CSS"],
    tex2jax: {
      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
      displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
      processEscapes: true
    },
    "HTML-CSS": { availableFonts: ["TeX"] }
};
</script>
<script type="text/javascript" async
  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js">
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calculating Stocks' Beta Using R]]></title>
    <link href="http://DanialK.github.com/blog/2015/12/19/calculating-stocks-beta-using-r/"/>
    <updated>2015-12-19T20:13:00+11:00</updated>
    <id>http://DanialK.github.com/blog/2015/12/19/calculating-stocks-beta-using-r</id>
    <content type="html"><![CDATA[<p>According to <a href="http://www.investopedia.com/terms/b/beta.asp">Investopedia</a>, Beta is a measure of the volatility, or systematic risk, of a security or a portfolio in comparison to the market as a whole. In this post, we're going to learn how to calculate beta coefficient of our desired stocks using historical price data that is publicly available.</p>

<p>Below we will be covering</p>

<ul>
<li>R script to calculate beta for Goldman Sachs</li>
<li>Maths behind the beta coefficient</li>
</ul>


<!-- more -->


<p>In this tutorial we are using S&amp;P500 as our market and we're calculating beta of Goldman Sachs in relation to S&amp;P500. It's essentially the correlation of price movements of stocks within the market/index, to individual stocks within the market/index.</p>

<p>In order to calculate beta, we need to obtain historical data for both S&amp;P500 and Goldman Sachs. I'm using Yahoo Finance's public API in order to get historical quotes.</p>

<p>Follow the code and make sure you read the comments !</p>

<p>``` r script.R https://github.com/DanialK/multiple-line-graph-r/blob/master/</p>

<h1>We're obtaining the weekly data</h1>

<h1>More information about Yahoo Finance Historical Quotes API</h1>

<h1>https://code.google.com/p/yahoo-finance-managed/wiki/csvHistQuotesDownload</h1>

<p>indexUrl &lt;- 'http://ichart.yahoo.com/table.csv?s=%5EGSPC&amp;a=00&amp;b=3&amp;c=1950&amp;d=11&amp;e=19&amp;f=2015&amp;g=w'
stockUrl &lt;- 'http://ichart.yahoo.com/table.csv?s=GS&amp;a=04&amp;b=4&amp;c=1999&amp;d=11&amp;e=19&amp;f=2015&amp;g=w'</p>

<h1>stockUrl &lt;- 'http://ichart.yahoo.com/table.csv?s=MSFT&amp;a=02&amp;b=13&amp;c=1986&amp;d=11&amp;e=19&amp;f=2015&amp;g=w'</h1>

<h1>read.csv fetches the csv data from an api endpoint if a valid url is provided</h1>

<p>indexData &lt;- read.csv(indexUrl)
stockData &lt;- read.csv(stockUrl)</p>

<h1>Making sure R knows the Date column is Date</h1>

<p>indexData$Date &lt;- as.Date(indexData$Date)
stockData$Date &lt;- as.Date(stockData$Date)</p>

<h1>Usually index contains more values</h1>

<h1>Data received form yahoo endpoints are ordered from latest to oldest so</h1>

<h1>we only subset the part of index data that contains stock information in it</h1>

<p>indexData &lt;- indexData[1:length(stockData$Date), ]</p>

<h1>Making sure dates are matching and then we grab the weekly close prices of both index and the stock</h1>

<p>range &lt;- indexData$Date == stockData$Date
indexPrices &lt;- indexData$Close[range]
stockPrices &lt;- stockData$Close[range]</p>

<h1>Calculating the weekly return, e.g (x2-x1)/x1</h1>

<p>indexReturns &lt;- ( indexPrices[1:(length(indexPrices) - 1)] - indexPrices[2:length(indexPrices)] ) / indexPrices[2:length(indexPrices)]
stockReturns &lt;- ( stockPrices[1:(length(stockPrices) - 1)] - stockPrices[2:length(stockPrices)] ) / stockPrices[2:length(stockPrices)]</p>

<h1>using R's lm function, we run a  regression analysis</h1>

<h1>we're using stockReturns as our y value</h1>

<h1>and using indexReturns as our x value</h1>

<h1>y ~ x is our formula</h1>

<p>fit &lt;- lm(stockReturns ~ indexReturns)
result &lt;- summary(fit)</p>

<h1>summary gives us a lot of useful information, but we're mostly in beta value !!</h1>

<p>beta &lt;- result$coefficients[2,1]
print(beta)</p>

<p>```</p>

<p>Mathematically, beta is the covariance of stocks percentage daily/weekly change and index/markets daily/weekly change divided by the variance of market's percentage daily/weekly changes:</p>

<p><code>Beta = Covariance(Stock's % Change, Index's % Change)/Variance(Index % Change)</code></p>

<p>You can replace the <code>stockUrl</code> with some other company's data that is in S&amp;P500. Make sure you read the <a href="https://code.google.com/p/yahoo-finance-managed/wiki/csvHistQuotesDownload">Yahoo Finance API</a> before doing so.</p>

<p>The main purpose of this tutorial is to see how regression can and <code>lm()</code> can be used in R, but it is also helpful to be able to calculate beta coefficient if you're running your own portfolio. The value obtained using this script (1.453472) at the time of writing was a little bit off from the values provided by <a href="https://www.google.com/finance?q=NYSE%3AGS&amp;ei=ihJ1VsmIH5eb0ATC84yIBA">Google Finance</a>(1.67) and <a href="https://au.finance.yahoo.com/q/ks?s=GS">Yahoo Finance</a>(1.38) which can be due to using different time spans for their beta calculations. But since those two numbers don't match, I'd say you should trust the value that you've calculated yourself !!</p>

<p>If you made to here, I hope you found it useful !</p>

<p>Please leave a comment if there are any questions, tips or other concerns.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R: Fancy plots using ggplot2 and ggthemes]]></title>
    <link href="http://DanialK.github.com/blog/2015/12/17/r-fancy-plots-using-ggplot2-and-ggthemes/"/>
    <updated>2015-12-17T15:43:00+11:00</updated>
    <id>http://DanialK.github.com/blog/2015/12/17/r-fancy-plots-using-ggplot2-and-ggthemes</id>
    <content type="html"><![CDATA[<p>In this post I want to introduce you to a great ggplot2 add-on, ggthemes.
ggthemes which is freely available on <a href="https://github.com/jrnold/ggthemes">github</a>, let you turn your current plots to professional looking plots in a matter of a couple of lines of code.</p>

<p>ggthemes has various of different themes such as <code>The Economist</code>, <code>Excel</code> and various other professional themes that makes your current plots much fancier.</p>

<p>Here is a plot that I made for one of my assignments this year using this library.
<img src="/images/ggthemes_tutorial.png"></p>

<p>Check out more examples on its offical <a href="https://github.com/jrnold/ggthemes">Github Repo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiline plots in R using ggplot2]]></title>
    <link href="http://DanialK.github.com/blog/2015/12/13/multiline-plots-in-r-using-ggplot2/"/>
    <updated>2015-12-13T15:04:00+11:00</updated>
    <id>http://DanialK.github.com/blog/2015/12/13/multiline-plots-in-r-using-ggplot2</id>
    <content type="html"><![CDATA[<p><img src="/images/multiple-line-graph-r.png"></p>

<p>With the help of ggplot2, creating beautiful charts is an easy task in R. However it can get a little bit tricky when you're trying to plot a set of data on a single chart, over a shared x axis.</p>

<!-- more -->


<p>A neat trick is using the library <code>reshape2</code> which is a very useful data manipulation library for R.
With the help of <code>melt</code> function of this library, we can combine our data into a single data frame in the format that ggplot2 wants from us in order to draw different lines over the same axis.</p>

<p>In this example, in data.csv I have function values of y=x, y=x<sup>2</sup> and y=x<sup>3</sup> for x values from 1 to 10 and i'm trying to draw these 3 charts on the same axis.</p>

<p>Note: if you haven't installed <code>ggplot2</code> and <code>reshape2</code> make sure to run
<code>
install.packages("ggplot2")
</code> and
<code>
install.packages("reshape2")
</code></p>

<p>``` js script.R https://github.com/DanialK/multiple-line-graph-r/blob/master/script.R
library(ggplot2)
library(reshape2)</p>

<p>data &lt;- read.csv('./data.csv')</p>

<p>chart_data &lt;- melt(data, id='x')
names(chart_data) &lt;- c('x', 'func', 'value')</p>

<p>ggplot() +
  geom_line(data = chart_data, aes(x = x, y = value, color = func), size = 1)+
  xlab("x axis") +
  ylab("y axis")</p>

<p>```</p>

<p>You can find the source code <a href="https://github.com/DanialK/multiple-line-graph-r">here on github</a></p>
]]></content>
  </entry>
  
</feed>
