<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PassportJS | Danial Khosravi's Blog]]></title>
  <link href="http://DanialK.github.com/blog/categories/passportjs/atom.xml" rel="self"/>
  <link href="http://DanialK.github.com/"/>
  <updated>2016-12-29T11:43:33+11:00</updated>
  <id>http://DanialK.github.com/</id>
  <author>
    <name><![CDATA[Danial Khosravi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Authentication Using PassportJS]]></title>
    <link href="http://DanialK.github.com/blog/2013/02/23/authentication-using-passportjs/"/>
    <updated>2013-02-23T01:35:00+11:00</updated>
    <id>http://DanialK.github.com/blog/2013/02/23/authentication-using-passportjs</id>
    <content type="html"><![CDATA[<p>As I promised before, today i'm going to talk about authentication with <a href="http://passportjs.org/">PassportJS</a>.
Passport is one of the capable node modules which can be used for local authentication or even using it for integrating with Facebook or Twitter and …</p>

<p>Basically in passport we set up some strategies and then pass the passport middleware into our application and then passport will take care of most of the things.</p>

<p>Strategies can be local for your local authentication , or Facebook for authentication with Facebook .</p>

<p>I'm going talk about Passport API a little bit and building a sample app which have local, Facebook and Twitter authentication. And also i'm going to use MongoDB as database of this application.</p>

<h1>Application Overview :</h1>

<ol>
<li>Installing Passport and adding to app</li>
<li>Adding passport middlewares</li>
<li>Database and Models</li>
<li>Setting the strategies</li>
<li>Function Handlers</li>
<li>Routes</li>
</ol>


<hr />

<!-- more -->


<h3>Firstly, what is the pass.js?</h3>

<p>As you may noticed in my source file folder i'm using a pass.js as a module in my app. I could have just save username and password of each user in my database for authentication but to make our simple app look a little bit serious I used this file which I copied form TJ examples. basically what it does is for making new user if you pass user password to it using  <code>crypto</code>, Node's built-in module, it encrypt our user's password and save it to db. And if we trying to sing in the function take the entered password and encrypt it and check it with a encrypted password which is saved in database and if they are same, it would log the user into the site.
We could have don't use it but it's not a bad idea to use it !!</p>

<hr />

<h1>Lets Get Started</h1>

<h3>Installing Passport:</h3>

<p>Firstly you should install the PassportJS using NPM and require it in to your application.</p>

<pre><code>$ npm install passport
</code></pre>

<p>Because we are going to define Facebook and Twitter strategies, lets install their plugins as well as local plugin for local authentication :</p>

<pre><code>$ npm install passport-local
$ npm install passport-facebook
</code></pre>

<p>And require them :</p>

<p>``` js
passport = require("passport");
LocalStrategy = require('passport-local').Strategy;
FacebookStrategy = require('passport-facebook').Strategy;</p>

<p>```</p>

<h3>Middlewares:</h3>

<p>Then make sure you have this middleware in use :</p>

<p>``` js</p>

<p>app.use(express.cookieParser());
app.use(express.bodyParser());
app.use(express.session({ secret: 'SECRET' }));
app.use(passport.initialize());
app.use(passport.session());</p>

<p>```</p>

<h3>Database and Models:</h3>

<p>I'm using mongoose to use my MongoDB server in application.</p>

<ol>
<li>Run mongo server by <code>mongod</code></li>
<li>Connect to server in application<code>mongoose.connect("mongodb://localhost/myapp");</code></li>
<li>Our local user schema and it's model to store information of our local users.
``` js</li>
</ol>


<p>var LocalUserSchema = new mongoose.Schema({</p>

<pre><code>username: String,
salt: String,
hash: String
</code></pre>

<p>});</p>

<p>var Users = mongoose.model('userauths', localUserSchema);</p>

<p>```
4. Our Facebook users schema and model to store information of the users that logged in with Facebook</p>

<p>``` js
var FacebookUserSchema = new mongoose.Schema({</p>

<pre><code>fbId: String,
email: { type : String , lowercase : true},
name : String
</code></pre>

<p>});
var FbUsers = mongoose.model('fbs',FacebookUserSchema);</p>

<p>```</p>

<h3>Strategies:</h3>

<p>To use passport as our middleware first we should set the strategies to be initialised using passport initialise middleware.</p>

<h4>Local Strategy</h4>

<p>``` js</p>

<p>passport.use(new LocalStrategy(function(username, password,done){</p>

<pre><code>Users.findOne({ username : username},function(err,user){
    if(err) { return done(err); }
    if(!user){
        return done(null, false, { message: 'Incorrect username.' });
    }

    hash( password, user.salt, function (err, hash) {
        if (err) { return done(err); }
        if (hash == user.hash) return done(null, user);
        done(null, false, { message: 'Incorrect password.' });
    });
});
</code></pre>

<p>}));</p>

<p>```</p>

<h4>Facebook Strategy</h4>

<p>Firstly you should go to <a href="https://developers.facebook.com/">Facebook Developer</a> and make a new application to get clientID and clientSecret. It should be noted that because we are running this app locally so set the app URL to <code>http://localhost:3000</code> . Also in callbackURL we passed the "/auth/facebook/callback" route at the end of the address because the authentication data would send to this route to be connected to Facebook and be integrated.</p>

<p>``` js
passport.use(new FacebookStrategy({</p>

<pre><code>clientID: "YOUR ID",
clientSecret: "YOUR CODE",
callbackURL: "http://localhost:3000/auth/facebook/callback"
</code></pre>

<p>  },
  function(accessToken, refreshToken, profile, done) {</p>

<pre><code>FbUsers.findOne({fbId : profile.id}, function(err, oldUser){
    if(oldUser){
        done(null,oldUser);
    }else{
        var newUser = new FbUsers({
            fbId : profile.id ,
            email : profile.emails[0].value,
            name : profile.displayName
        }).save(function(err,newUser){
            if(err) throw err;
            done(null, newUser);
        });
    }
}); 
</code></pre>

<p>  }
));</p>

<p>```</p>

<p>The other important part of configuring passport is serializeUser and deserializeUser which basically set the user to req.user and establish a session via a cookie set in the user's browser.
``` js</p>

<p>passport.serializeUser(function(user, done) {</p>

<pre><code>done(null, user.id);
</code></pre>

<p>});</p>

<p>passport.deserializeUser(function(id, done) {</p>

<pre><code>FbUsers.findById(id,function(err,user){
    if(err) done(err);
    if(user){
        done(null,user);
    }else{
        Users.findById(id, function(err,user){
            if(err) done(err);
            done(null,user);
        });
    }
});
</code></pre>

<p>});</p>

<p>```
In deserializeUser we typically find a user in database based on the given id and pass the result to done(). As you may noticed for some reason I separate the local users and Facebook users in different documents(collections) that's why I did so in deserializeUser but I believe there should be a better practice for searching a data in tow different collection that what i've done but I couldn't find such a query in mongoose api !</p>

<h3>Function Handlers</h3>

<p>Like my previous example on authentication ( the simple one) here we have 2 helper function.One for check if user logged in and can access to all the parts of the site and we can use it as a middleware of the routes that need authentication,and the other one which we just use it as a middleware of post request on "/signup" route to make sure the username had not already taken .</p>

<p>The main different of this authenticatedOrNot function with the one in previous tutorial is that passport provide a isAuthenticated() method which we can use it intend if req.session.user which we used in previous tutorial.</p>

<p>``` js</p>

<p>function authenticatedOrNot(req, res, next){</p>

<pre><code>if(req.isAuthenticated()){
    next();
}else{
    res.redirect("/login");
}
</code></pre>

<p>}</p>

<p>function userExist(req, res, next) {</p>

<pre><code>Users.count({
    username: req.body.username
}, function (err, count) {
    if (count === 0) {
        next();
    } else {
        // req.session.error = "User Exist"
        res.redirect("/singup");
    }
});
</code></pre>

<p>}</p>

<p>```</p>

<h3>Routes:</h3>

<p>The routes are quit easy to understand if you check at the source code, but there is some passport methods that i'm going to explain</p>

<p>First, in our post request to "/signup" request after saving a new user to database, I used passport built in login method which automatically log the new user in after signing up and redirect him/her to "/".</p>

<p>Second, every time you use Facebook strategy you should prepare two routes for the authentication with Facebook (or even twitter and …).</p>

<p>``` js</p>

<p>app.get("/auth/facebook", passport.authenticate("facebook",{ scope : "email"}));</p>

<p>app.get("/auth/facebook/callback",</p>

<pre><code>passport.authenticate("facebook",{ failureRedirect: '/login'}),
function(req,res){
    res.render("loggedin", {user : req.user});
}
</code></pre>

<p>);</p>

<p>```</p>

<p>It use <code>passport.authenticate()</code> method and by passing "facebook" it knows that it should use Facebook strategy</p>

<p>Third, if you don't use Facebook or etc for singing in the site and you fill the login form in "/login" route and submit it, it would send a post request to "/login" which is going to be checked and authenticated by passing "local" as a first argument of <code>passport.authenticate()</code> method. Also there is some options like <code>successRedirect</code> ,<code>failureRedirect</code>, or even <code>successFlash</code> and <code>failureFlash</code> if you use <a href="https://github.com/jaredhanson/connect-flash">connect-flash</a> .</p>

<p>And lastly, passport have a built in logout() method that instead of destroying session like what we did before, we can use <code>req.logout()</code> on our "/logout" route.</p>

<hr />

<h1>Also,</h1>

<p>Check out the jade files and routes to see how we welcome authenticated user's and also the can access to "/profile" route.</p>

<p>If you have any question or even any hint to improve my knowledge I appreciate to hear from you <strong>@DaniaL_KH</strong> or <strong>dani_khosravi@yahoo.com</strong> .</p>

<p>Hope you enjoy this simple tutorial.</p>

<h2><a href="https://github.com/DanialK/PassportJS-Authentication">Source Code on Github</a></h2>
]]></content>
  </entry>
  
</feed>
