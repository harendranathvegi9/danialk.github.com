<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Socket.IO | Danial Khosravi's Blog]]></title>
  <link href="http://DanialK.github.com/blog/categories/socket-io/atom.xml" rel="self"/>
  <link href="http://DanialK.github.com/"/>
  <updated>2016-11-29T00:31:55+11:00</updated>
  <id>http://DanialK.github.com/</id>
  <author>
    <name><![CDATA[Danial Khosravi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Arduino, ProcessingJS and SocketIO In Action]]></title>
    <link href="http://DanialK.github.com/blog/2014/04/26/arduino-and-processingjs-and-socketio-in-action/"/>
    <updated>2014-04-26T21:06:00+10:00</updated>
    <id>http://DanialK.github.com/blog/2014/04/26/arduino-and-processingjs-and-socketio-in-action</id>
    <content type="html"><![CDATA[<p>So today I wanted to do something relatively cool(!!) with things that I had around me. There are a lot of examples out there that sends input values from Arduino to Processing and then draw something cool. I wanted to do something a bit cooler and as always I wanted to bring Javascript into the action.
In this tutorial i'm showing you how I connected my Arduino to a local NodeJS server and with the use of SocketIO send the value of potentiometer to client side and draw a cool graph with ProcessingJS !!!</p>

<!-- more -->


<h3>Arduino</h3>

<p>We begin with setting up the Arduino board and program it to write the value of potentiometer into serial port.</p>

<p>I used following schematic to set wire up my board to potentiometer:</p>

<p><img src="/images/arduino-processingjs-socketio.png"></p>

<p>Now using the following code, we read the value of potentiometer
``` js
void setup() {
  // initialize serial communication at 9600 bits per second:
  Serial.begin(9600);
}</p>

<p>void loop() {
  // read the input on analog pin 0:
  int sensorValue = analogRead(A0);
  // map the value between 0 to 90 :
  float val = map(sensorValue,0,1023,0,90);
  // print out the value :
  Serial.println(val);
}
```</p>

<p>Note that I mapped our analog value of potentiometer, which is between 0 to 1023, to a number between 0 to 90. It's because we need our value to be in that range so our processing example would draw correctly.</p>

<h3>Server</h3>

<p>Our server needs to have access to the same serial port that the Arduino is connected to read the value and send it to the client using SocketIO.
This node server also uses ExpressJS to serve the static files.
My Arduino is connected to <code>/dev/tty.usbmodem1421</code> . In Arduino app if you go to tools/serial port the one that has check next to it is the port that your Arduino board is connected. Windows users your port would start with <code>COM</code>.</p>

<p>``` js
var http = require('http');
var express = require('express');
var app = express();
var SerialPort = require("serialport").SerialPort;
var server = http.createServer(app).listen(3000);
var io = require('socket.io').listen(server);</p>

<p>app.use(express.static(__dirname + '/public'));</p>

<p>var serialport = new SerialPort("/dev/tty.usbmodem1421"); // replace this address with your port address
serialport.on('open', function(){</p>

<pre><code>// Now server is connected to Arduino
console.log('Serial Port Opend');

var lastValue;
io.sockets.on('connection', function (socket) {
    //Connecting to client 
    console.log('Socket connected');
    socket.emit('connected');
    var lastValue;

    serialport.on('data', function(data){
        var angle = data[0];
        if(lastValue !== angle){
            socket.emit('data', angle);
        }
        lastValue = angle;
    });
});
</code></pre>

<p>});</p>

<p>```
Keep that in mind that Arduino constantly reads the value of potentiometer and writes it into the serial. If we emit every single value that comes into the serial port app would be slow. That's why we keep the value from serial port in lastValue and check it each time and if it changed we're going to emit the value to the client.</p>

<h3>Client Side</h3>

<p>In our browser <code>script.js</code>, we're listening for data event on socket and we're going to show the value on the screen as well as assigning it to our angle variable.</p>

<p>``` js</p>

<p>var dialogue = document.getElementById('dialogue');
var box = document.getElementById('angle');
socket.on('connected', function(){</p>

<pre><code>dialogue.innerHTML = "Socket Connected";
</code></pre>

<p>});
socket.on('disconnect', function(){</p>

<pre><code>dialogue.innerHTML = "Socket Disconnected";
</code></pre>

<p>});
socket.on('data', function (data) {</p>

<pre><code>box.innerHTML = data;
angle = data;
</code></pre>

<p>});</p>

<p>```</p>

<p>pretty easy right?</p>

<h3>ProcessingJS</h3>

<p>I'm not an expert in Processing but good news is i've started learning more about Processing language and trying to make some cool stuff with it. So I found this example in ProcessingJS website which I thinks it's perfect for this little project(it exactly gives you that feeling that something is changing as you play with the potentiometer).</p>

<p><a href="http://processingjs.org/learning/topic/tree/">Link to the example on ProcessingJS website</a></p>

<p>After including the ProcessingJS to our HTML page, like below we load our tree.pde, which is a processing file into our app and ProcessingJS will compile and draw it for us into our canvas. You just have to give the path of the file in your filesystem relative to the index.html file.
<code>js
&lt;canvas id="tree" data-processing-sources="tree.pde"&gt;&lt;/canvas&gt;
</code></p>

<p>The only difference of this tree.pde and actual code on the ProcessingJS website is that in the actual code, they generate the angle from position of you mouse on the canvas. However in our example we get the angle from our Arduino. The cool thing about ProcessingJS is that because it compiles processing code into Javascript, then you are allowed to write Javascript inside your processing code and you have access to all the Javascript functions and variables. That's why we can directly replace the <code>float a = (mouseX / (float) width) * 90f;</code> in the actual code with <code>float a = angle;</code> which angle is a global variable and it's value changes everytime our client code receives new value form server.</p>

<h3>Result</h3>

<p>Here is a gif of the result. As you can see I have tree windows open and they are all sync together because of the realtime communication of client and server using SocketIO.</p>

<p><img class="thumb" src="/images/arduino-processingjs-socketio-gif-thumb.png"></p>

<h4>The source code of this project is available <a href="https://github.com/DanialK/arduino-processingjs-socketio">HERE</a> on github.</h4>

<p>Make sure to run <code>npm install &amp;&amp; bower install</code> to install all the dependencies.
Connect your Arduino board to the same port that you set in your app.js and then run <code>npm start</code> and head over to <code>localhost:3000</code> to see the magic !!!</p>

<p>Hope you guys enjoyed it !!
If you had any question use comments below or send me your questions at dani_khosravi@yahoo.com. Also follow me on <a href="https://twitter.com/DaniaL_KH">twitter</a> if your interested in Arduino, Javascript and these sort of goodies :D</p>

<p><script type="text/javascript">
	$(document).ready(function(){
		var thumb = $('.thumb');
		var thumbSrc = thumb.attr('src');
		var gifSrc = thumbSrc.slice(0, thumbSrc.indexOf('-gif-thumb')) + '.gif';
		thumb.one('click', function() {
			$(this).attr('src', gifSrc);
		});
	});
</script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactJS and Socket.IO Chat Application]]></title>
    <link href="http://DanialK.github.com/blog/2013/06/16/reactjs-and-socket-dot-io-chat-application/"/>
    <updated>2013-06-16T19:52:00+10:00</updated>
    <id>http://DanialK.github.com/blog/2013/06/16/reactjs-and-socket-dot-io-chat-application</id>
    <content type="html"><![CDATA[<h2>Updated(13/7/2015)</h2>

<p>A week ago I was playing with AngularJS and <a href="https://github.com/btford/angular-socket-io-im">this</a> little chat application which uses socket.io and nodejs for realtime communication.
Yesterday I saw a post about <a href="http://facebook.github.io/react">ReactJS</a> in EchoJS and started playing with this UI library. After playing a bit with React, I decided to write and chat application using React and I used <a href="https://github.com/btford/angular-socket-io-im">Bran Ford's Backend</a> for server side of this little app.</p>

<!-- more -->


<h4>Note About Server</h4>

<p>It's the same backend used <a href="https://github.com/btford/angular-socket-io-im">this</a> but with a bit of clean up.
When you connect to server it give you a name like "Guest1" and you can change it. Changing Name broadcast a 'change:name' event to all other users. Also sending message broadcast 'send:message' event to others. Also it inform others when a user disconnect or connect.</p>

<h2>ReactJS Introduction :</h2>

<p>First I suggest you to take a look at tutorial page in react's website.</p>

<p>Like what website says, React components implement a render() method that takes input data and returns what to display. A cool thing about React is that you can write your html inside your javascript(I know we always try not to do so, but it's a bit different here). They call this XML like syntax <a href="http://facebook.github.io/react/docs/syntax.html">JSX</a>.</p>

<p>React is not very complicated. You only need to understand components lifecycles and difference of props and state. In JSX for passing your (model) data to your components, you pass them like html attributes, and you can use them inside the component through this.props !!
States are a pieces of data inside your UI that you can change them and set them back and class's render method will take care of rendering them !!
Also for the people that have Backbone background, React's components are like backbone views. It doesn't mean that it replace the backbone view, but they have their own use cases which i'm sure after playing with react you'll get it !!</p>

<p>Again suggest to check the website docs and then jump back here, it's cool !!!</p>

<h2>Lets Begin</h2>

<p>Application Components Structure is like this :</p>

<p>```</p>

<pre><code>- ChatApp
    - UserList
    - MessageList
        -Message
    - MessageForm
    - ChangeNameForm
</code></pre>

<p>```</p>

<h4>UserList:</h4>

<p>Inside this component I have and renderUser function which return a html with the data that we pass to it !
Render function return the li tag for each of the users, that we want to pass to this component.</p>

<p>``` js</p>

<p>var UsersList = React.createClass({</p>

<pre><code>render() {
    return (
        &lt;div className='users'&gt;
            &lt;h3&gt; Online Users &lt;/h3&gt;
            &lt;ul&gt;
                {
                    this.props.users.map((user, i) =&gt; {
                        return (
                            &lt;li key={i}&gt;
                                {user}
                            &lt;/li&gt;
                        );
                    })
                }
            &lt;/ul&gt;               
        &lt;/div&gt;
    );
}
</code></pre>

<p>});</p>

<p>```</p>

<h4>Message And MessageList:</h4>

<p>Message class's job is just to render a single message and it is so straight forward.</p>

<p>``` js</p>

<p>var Message = React.createClass({</p>

<pre><code>render() {
    return (
        &lt;div className="message"&gt;
            &lt;strong&gt;{this.props.user} :&lt;/strong&gt; 
            &lt;span&gt;{this.props.text}&lt;/span&gt;      
        &lt;/div&gt;
    );
}
</code></pre>

<p>});</p>

<p>```</p>

<p>The cool part of react starts when you use these components like and html tag inside another, which in this case our message list contains a function to render each message inside it's div.</p>

<p>``` js</p>

<p>var MessageList = React.createClass({</p>

<pre><code>render() {
    return (
        &lt;div className='messages'&gt;
            &lt;h2&gt; Conversation: &lt;/h2&gt;
            {
                this.props.messages.map((message, i) =&gt; {
                    return (
                        &lt;Message
                            key={i}
                            user={message.user}
                            text={message.text} 
                        /&gt;
                    );
                })
            } 
        &lt;/div&gt;
    );
}
</code></pre>

<p>});</p>

<p>```</p>

<h4>MessageForm And ChangeNameForm:</h4>

<p>These two our quite similar. We have a submit handler that take the message and give it to the callback of it's parent component(ChatApp) for future rendering and emitting to server. Also it keep track of the message when you type and assign it to a property (like text) in state using setState. And in we can use this data in it's class state.</p>

<p>``` js</p>

<p>var MessageForm = React.createClass({</p>

<pre><code>getInitialState() {
    return {text: ''};
},

handleSubmit(e) {
    e.preventDefault();
    var message = {
        user : this.props.user,
        text : this.state.text
    }
    this.props.onMessageSubmit(message);    
    this.setState({ text: '' });
},

changeHandler(e) {
    this.setState({ text : e.target.value });
},

render() {
    return(
        &lt;div className='message_form'&gt;
            &lt;h3&gt;Write New Message&lt;/h3&gt;
            &lt;form onSubmit={this.handleSubmit}&gt;
                &lt;input
                    onChange={this.changeHandler}
                    value={this.state.text}
                /&gt;
            &lt;/form&gt;
        &lt;/div&gt;
    );
}
</code></pre>

<p>});</p>

<p>var ChangeNameForm = React.createClass({</p>

<pre><code>getInitialState() {
    return {newName: ''};
},

onKey(e) {
    this.setState({ newName : e.target.value });
},

handleSubmit(e) {
    e.preventDefault();
    var newName = this.state.newName;
    this.props.onChangeName(newName);   
    this.setState({ newName: '' });
},

render() {
    return(
        &lt;div className='change_name_form'&gt;
            &lt;h3&gt; Change Name &lt;/h3&gt;
            &lt;form onSubmit={this.handleSubmit}&gt;
                &lt;input
                    onChange={this.onKey}
                    value={this.state.newName} 
                /&gt;
            &lt;/form&gt; 
        &lt;/div&gt;
    );
}
</code></pre>

<p>});</p>

<p>```</p>

<h4>ChatApp</h4>

<p>Last component is ChatApp, in which we put all these small components together to run our app.</p>

<p>React's classes has a getInitialState function which expect us to return the initial data of class. <code>componentDidMount</code> gets called after the component mounted, therefore it's the best place to attach our socket.io listeners.</p>

<p>``` js</p>

<p>var ChatApp = React.createClass({</p>

<pre><code>getInitialState() {
    return {users: [], messages:[], text: ''};
},

componentDidMount() {
    socket.on('init', this._initialize);
    socket.on('send:message', this._messageRecieve);
    socket.on('user:join', this._userJoined);
    socket.on('user:left', this._userLeft);
    socket.on('change:name', this._userChangedName);
},

_initialize(data) {
    var {users, name} = data;
    this.setState({users, user: name});
},

_messageRecieve(message) {
    var {messages} = this.state;
    messages.push(message);
    this.setState({messages});
},

_userJoined(data) {
    var {users, messages} = this.state;
    var {name} = data;
    users.push(name);
    messages.push({
        user: 'APPLICATION BOT',
        text : name +' Joined'
    });
    this.setState({users, messages});
},

_userLeft(data) {
    var {users, messages} = this.state;
    var {name} = data;
    var index = users.indexOf(name);
    users.splice(index, 1);
    messages.push({
        user: 'APPLICATION BOT',
        text : name +' Left'
    });
    this.setState({users, messages});
},

_userChangedName(data) {
    var {oldName, newName} = data;
    var {users, messages} = this.state;
    var index = users.indexOf(oldName);
    users.splice(index, 1, newName);
    messages.push({
        user: 'APPLICATION BOT',
        text : 'Change Name : ' + oldName + ' ==&gt; '+ newName
    });
    this.setState({users, messages});
},

handleMessageSubmit(message) {
    var {messages} = this.state;
    messages.push(message);
    this.setState({messages});
    socket.emit('send:message', message);
},

handleChangeName(newName) {
    var oldName = this.state.user;
    socket.emit('change:name', { name : newName}, (result) =&gt; {
        if(!result) {
            return alert('There was an error changing your name');
        }
        var {users} = this.state;
        var index = users.indexOf(oldName);
        users.splice(index, 1, newName);
        this.setState({users, user: newName});
    });
},

render() {
    return (
        &lt;div&gt;
            &lt;UsersList
                users={this.state.users}
            /&gt;
            &lt;MessageList
                messages={this.state.messages}
            /&gt;
            &lt;MessageForm
                onMessageSubmit={this.handleMessageSubmit}
                user={this.state.user}
            /&gt;
            &lt;ChangeNameForm
                onChangeName={this.handleChangeName}
            /&gt;
        &lt;/div&gt;
    );
}
</code></pre>

<p>});</p>

<p>```</p>

<p>Take a look at render function. We used our components and we assign their properties like and html attributes which is equals to a react expression. Inside the expressions we used the main data that come from backend, like users and messages, and are in ChatApp's state.</p>

<p>Last but not least, using <code>React.render</code>, we render the ChatApp and in the app div.</p>

<p>``` js</p>

<p>React.render(<ChatApp/>, document.getElementById('app'));</p>

<p>```</p>

<p>You can see the source code <a href="https://github.com/DanialK/ReactJS-Realtime-Chat">here</a>.</p>

<p>Hope it helped you get up and running with React!!</p>

<hr />

<p>***Update(9/8/2013): Update to React v0.4.1</p>

<h4>***Update(13/7/2015):</h4>

<p>Ok after 2 years, a lot of things has changed, but React (&lt;3) is still an awesome library !!</p>

<p>Here's list of changes:</p>

<pre><code>* Update to React v0.13 + Required changes in the code
* Using Browserify + Babelify to compile our JSX files
* Using ES6 way of defining methods inside the classes and arrow functions + some other ES6 goodies
* Server updated to Express v4.13 
</code></pre>
]]></content>
  </entry>
  
</feed>
